=head1 NAME

husk - iptables firewall compiler with IPv4 and IPv6 support

=head1 SYNOPSIS

husk [OPTIONS]

Without any options, husk will look for a configuration file in /etc/husk/ and
attempt to compile the firewall rules into iptables syntax, writing its output
to stdout

=head1 DESCRIPTION

husk is a natural language wrapper around the Linux iptables packet filtering
engine (iptables). It is designed to abstract the sometimes confusing syntax of
iptables, allowing use of rules that have better readability, and expressed in
a more 'freeform' and reusable fashion compared to normal 'raw' iptables rules.

husk can be used on either firewall/router computers (with multiple network
interfaces), or standalone systems (with one network interface)

Each interface (real or virtual) is called a 'zone' in husk. Zones are given a
friendly name which is what is used in the rule definitions. This abstracts the
Linux device names (eg, eth0, ppp0, bond0 etc) into much more intuitive names
such as NET, LAN and DMZ. This has the added benefit of moving interfaces in
the future can be done simply by changing the name-to-device mapping.

=head2 fwfire script

It is suggested to use the supplied "fwfire" script when loading your rules. This
script provides several functions:

=over 4

=item * Compiles your rule file(s) ready to activate

=item * Saves the live rules to a temporary file to allow rollback

=item * Attempts to load the new rules (non-atomically; see below)

=item * Asks you for confirmation that the rules loaded successfully. If
confirmation is not given, rollback to previous rules is initiated after a
timeout.

=item * Calls the iptables/ip6tables init script to save the new rules so they
are loaded again at next reboot.

=back

=head2 Atomic loading of rules

Prior to version 0.9.11, husk has generated output that resulted in non-atomic
loading of rules (output format 'bash'). This had some advantages, and some
disadvantages. After 0.9.11, support for atomic loading of rules using
iptables-restore/ip6tables-restore was added. This is still configurable using
the output_format option in husk.conf, or the -f/--format flag.

=head1 OPTIONS

=over 4

=item -4

Only output compiled IPv4 rules.

=item -6

Only output compiled IPv6 rules.

=item -f, --format

Change the output format. Valid options are C<restore> (for output suitable to
pipe to iptables-restore/ip6tables-restore) or C<bash> (for output that can be
run as a bash script).
Note that either -4 or -6 B<MUST> be specified if output format is C<restore>
Default: C<restore>

=item -c, --conf

Path to configuration file to use.
Default: C</etc/husk/husk.conf>

=item -h, --help

Show terse help and and exit.

=item -V, --version

Show the version and exit.

=back

=head1 CONFIGURATION

By default, configuration lives in C</etc/husk/husk.conf>. Refer to man page
L<husk.conf> for full description of configuration file.

=head1 EXAMPLES

	husk | sh

Using the associated "fwfire" script:

	fwfire

=head1 HELPERS

Several helpers have been supplied with husk to assist with firewalling common
ports/applications such as:

=over 4

=item * Apple IOS Devices

=item * DHCP

=item * DNS

=item * Email Ports

=item * Windows (Active Directory, CIFS/Samba etc)

=item * SQL Applications

=back

Check in the C<helpers/> path for others.

=head2 Using Helpers

Using helpers is a 2 step process:

=over 4

=item 1. Include the helper file with the C<include /path/to/helper> directive

=item 2. Use the chains that helper creates.

=back

Refer to the example rules below to see it in action (eg, the ICMP helper).

=head1 RULES SYNTAX

To be completed.

=head2 Targets

Targets are the first part of any rule. They are be either a built-in (i.e.,
accept, drop, reject, log) or the name of a 'define rules' written elsewhere
in the rules file.

=over 4

=item * accept

Packets matching this rule should be ACCEPTED

=item * drop

Packets matching this rule should be DROPPED. This makes the packet dissappear
without any notification to the source address.

=item * reject

Packets matching this rule should be REJECTED. This sends an appropriate ICMP
notification packet to the source address.

=item * log

Packets matching this rule should be sent to the kernel log. Specific options:

=over 4

=item * prefix "string"

Log with a specific string for identification.

=back

=back

=head2 EXAMPLES

This set of example rules is for a simple firewall/router machine.

	include helpers/icmp.conf
	include helpers/gotomeeting.conf
	include helpers/samba.conf
	
	define rules LAN to NET
	GOTOMEETING source address 192.168.100.100
	SAMBA destination address cifs.example.com
	accept all	# Allow everything from local network
	end define
	
	define rules LAN to ME
	accept protocol tcp ports ssh,smtp,domain
	accept protocol udp ports ntp,domain
	accept protocol udp ports bootps,bootpc	# Allow clients to DHCP
	end define
	
	define rules INPUT
	ICMP all protocol icmp
	end define
	
	define rules OUTPUT
	# Refer to CAVEATS below.
	reject state new protocol tcp port 6667:6669	# No IRC from this box
	accept all
	end define
	
	define rules FORWARD
	ICMP all protocol icmp
	drop protocol tcp ports 135,137,138,139,445	# ignore annoying windows traffic
	drop protocol udp ports 135,137,138,139,445	# ignore annoying windows traffic
	# Allow bounce routing
	accept in LAN out LAN
	end define
	
	# Standard stuff
	common loopback
	common nat NET
	common bogon NET
	common portscan NET
	common xmas NET
	common syn NET
	common spoof LAN 10.0.0.0/24

=head2 IPV6

Rulesets default to IPv4 unless specified otherwise with the C<ip 6> or
C<ip both> keywords:

	define rules LAN to NET
	# Allow IPv6 connections to ipv6.google.com
	accept ip 6 protocol tcp ports http,https destination address ipv6.google.com
	# Allow IPv4 and IPv6 connections to ipv6.internode.on.net
	accept ip both protocol tcp ports http destination address ipv6.internode.on.net
	end define

Note: You must also enable IPv6 in your husk.conf file

=head1 CAVEATS

=over 4

=item * Remember the default policy for ALL chains in the 'filter' table is
DROP. THIS INCLUDES 'OUTPUT' so you need to explicitly allow (or write
appropriate rules for) outbound traffic. See example rules above.

=item * Early implementations of the IPv6 version of iptables (ip6tables) did
NOT support the 'comment' module. This module is used on EVERY rule to identify
where in the source file it was generated from. If you are using husk with an
early version of ip6tables, you need to use the --disable-ipv6-comments option.

=back

=head1 BUGS

=head2 Reporting Bugs

Email bug reports to L<fukawi2@gmail.com|mailto://fukawi2@gmail.com>

=head2 Known Bugs

None. Refer to "Reporting Bugs" ;)

=head1 ACKNOWLEDGEMENTS

Thanks to:

Mike Sampson for his assistance in adding and testing IPv6 support.

Matthew Cengia for pushing me to get atomic loading of rules working.

=head1 LICENSE

Copyright 2010-2014 Phillip Smith

Made available under the conditions of the GPLv2. This is free software; refer
to the F<LICENSE> file for details.

=head1 AVAILABILITY

L<http://www.huskfw.info/>

L<http://github.com/fukawi2/husk/>

=head1 AUTHOR

Phillip Smith aka fukawi2

=head1 SEE ALSO

netfilter homepage:
L<http://www.netfilter.org/>

=head2 IPv4 AND GENERAL REFERENCES

RFC919; Broadcasting Internet Datagrams:
L<http://www.ietf.org/rfc/rfc919.txt>

RFC1112; Host Extensions for IP Multicasting:
L<http://www.ietf.org/rfc/rfc1112.txt>

RFC1122; Requirements for Internet Hosts (Communication Layers):
L<http://www.ietf.org/rfc/rfc1122.txt>

RFC1166; Internet Numbers:
L<http://www.ietf.org/rfc/rfc1166.txt>

RFC1918; Address Allocation for Private Internets:
L<http://www.ietf.org/rfc/rfc1918.txt>

RFC2544; Benchmarking Methodology for Network Interconnect Devices:
L<http://www.ietf.org/rfc/rfc2544.txt>

RFC3927; Dynamic Configuration of IPv4 Link-Local Addresses:
L<http://www.ietf.org/rfc/rfc3927.txt>

RFC5736; IANA IPv4 Special Purpose Address Registry:
L<http://www.ietf.org/rfc/rfc5736.txt>

RFC5737; IPv4 Address Blocks Reserved for Documentation:
L<http://www.ietf.org/rfc/rfc5737.txt>

=head2 IPv6 REFERENCES

RFC3879; Deprecating Site Local Addresses:
L<http://www.ietf.org/rfc/rfc3879.txt>

RFC4291; IP Version 6 Addressing Architecture:
L<http://www.ietf.org/rfc/rfc4291.txt>

RFC4548; Internet Code Point (ICP) Assignments for NSAP Addresses:
L<http://www.ietf.org/rfc/rfc4548.txt>

RFC4048; RFC 1888 Is Obsolete:
L<http://www.ietf.org/rfc/rfc4048.txt>

RFC1888; OSI NSAPs and IPv6:
L<http://www.ietf.org/rfc/rfc1888.txt>

RFC4193; Unique Local IPv6 Unicast Addresses:
L<http://www.ietf.org/rfc/rfc4193.txt>

=cut

# vim: noexpandtab sw=4 ts=4
